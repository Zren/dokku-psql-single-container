#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname $0)/../common/functions"
source "$(dirname $0)/functions"
set +e

if [[ $1 == psql:* ]]; then
  load_container_id
fi

case "$1" in
  psql:admin_console)
    check_container
    interactive_docker_exec "$PSQL_CONTAINER_NAME" env TERM="$TERM" psql -h localhost -U postgres
    ;;

  psql:console)
    check_container; check_app; verify_app_name "$APP"; check_exists
    DATABASE=$(cat "$PSQL_ROOT/db_$APP")
    PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
    interactive_docker_exec "$PSQL_CONTAINER_NAME" env TERM="$TERM" PGPASSWORD="$PASSWORD" psql -h localhost -U "$DATABASE" "$DATABASE"
    ;;

  psql:url)
    check_container; check_app; verify_app_name "$APP"; check_exists
    db_url "$APP"
    ;;

  psql:create)
    check_container; check_app; verify_app_name "$APP"; check_already_exists
    PASSWORD=$(openssl rand -hex 32)
    DATABASE=$(database_name "$APP")
    echo "$DATABASE" > "$PSQL_ROOT/db_$APP"
    echo "$PASSWORD" > "$PSQL_ROOT/pass_$APP"
    chmod 600 "$PSQL_ROOT/db_$APP" "$PSQL_ROOT/pass_$APP"
    dokku_log_info1 "Creating database $APP"
    docker exec "$PSQL_CONTAINER_NAME" su - postgres -c "psql --command \"CREATE USER $DATABASE WITH PASSWORD '$PASSWORD';\";\
      createdb -E utf8 -O $DATABASE $DATABASE;\
      psql --command \"GRANT ALL PRIVILEGES ON DATABASE $DATABASE TO $DATABASE;\"" > /dev/null
    set_link_and_env_for "$APP"
    ;;

  psql:delete)
    check_container; check_app; check_exists
    DATABASE=$(cat "$PSQL_ROOT/db_$APP")
    dokku_log_info1 "Deleting database $APP"
    docker exec "$PSQL_CONTAINER_NAME" su - postgres -c "dropdb $DATABASE; dropuser $DATABASE" > /dev/null
    rm -f "$PSQL_ROOT/db_$APP" "$PSQL_ROOT/pass_$APP"
    if [[ -d "$DOKKU_ROOT/$APP" ]]; then
      unset_link_and_env_for "$APP"
    fi
    ;;

  psql:list)
    check_container
    interactive_docker_exec "$PSQL_CONTAINER_NAME" env TERM="$TERM" psql -h localhost -U postgres -c '\l'
    ;;

  psql:start)
    if [[ -n "$PSQL_ID" ]]; then
      echo "Postgresql container already running with ID: $PSQL_ID"
      exit 1
    fi
    OLD_ID=$(docker ps -f status=exited | grep "$PSQL_CONTAINER_NAME" | awk '{print $1}')
    if [[ -n $OLD_ID ]]; then
      dokku_log_info1 "Restarting previously stopped Postgresql container $OLD_ID"
      docker start "$OLD_ID" > /dev/null
      exit 0
    fi
    dokku_log_info1 "Starting Postgresql server"
    dokku_log_info1 "Port: $(bind_ip_options)"
    docker run $(bind_ip_options) -d -v "$PSQL_ROOT/data:/var/lib/postgresql/data" --name "$PSQL_CONTAINER_NAME" "$PSQL_IMAGE" > /dev/null
    ;;

  psql:restart)
    dokku psql:stop
    dokku psql:start
    ;;

  psql:stop)
    check_container
    dokku_log_info1 "Stopping Postgresql server"
    docker stop "$PSQL_CONTAINER_NAME" > /dev/null
    ;;

  psql:rebuild)
    dokku psql:stop
    dokku_log_info1 "Rebuilding Postgresql container"
    PSQL_BACKUP_IMAGE_NAME="psql-sc-backup"
    dokku_log_info1 "Commiting new image $PSQL_BACKUP_IMAGE_NAME"
    docker commit "$PSQL_CONTAINER_NAME" "$PSQL_BACKUP_IMAGE_NAME"
    PSQL_BACKUP_CONTAINER_NAME="psql-sc-backup"
    dokku_log_info1 "Renaming old container $PSQL_CONTAINER_NAME to $PSQL_BACKUP_CONTAINER_NAME"
    docker rename "$PSQL_CONTAINER_NAME" "$PSQL_BACKUP_CONTAINER_NAME"
    export PSQL_SC_IMAGE="$PSQL_BACKUP_IMAGE_NAME"
    dokku_log_info1 "Attempt to run new container using $PSQL_SC_IMAGE image."
    dokku psql:start
    dokku_log_info1 "If everything went well, delete the backup container/image with:"
    dokku_log_info1 "docker ..."
    dokku_log_info1 "docker ..."
    ;;

  psql:dump)
    check_container; check_app; verify_app_name "$APP"; check_exists
    DATABASE=$(cat "$PSQL_ROOT/db_$APP")
    PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
    docker exec "$PSQL_CONTAINER_NAME" env PGPASSWORD="$PASSWORD" pg_dump -Fc --no-acl --no-owner -h localhost -U "$DATABASE" -w "$DATABASE"
    ;;

  psql:restore)
    check_container; check_app; verify_app_name "$APP"; check_exists
    DATABASE=$(cat "$PSQL_ROOT/db_$APP")
    PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
    cat - | docker exec -i "$PSQL_CONTAINER_NAME" env PGPASSWORD="$PASSWORD" pg_restore -h localhost -cO -d "$DATABASE" -U "$DATABASE" -w
    ;;

  psql:status)
    [[ -n "$PSQL_ID" ]] && echo "Postgresql container running with ID: $PSQL_ID" && exit 0
    echo "Postgresql container not running"
    ;;

  help)
    cat && cat<<EOF
    psql:console     <app>                          Launch a postgresql console for <app>
    psql:url         <app>                          Get DATABASE_URL for <app>
    psql:create      <app>                          Create a Postgresql database for <app>
    psql:delete      <app>                          Delete Postgresql database for <app>
    psql:dump        <app> > <filename.dump>        Dump <app> database to PG dump format
    psql:restore     <app> < <filename.*>           Restore database to <app> from any format exported by pg_dump
    psql:admin_console                              Launch a postgresql console as admin user
    psql:restart                                    Restart the Postgresql docker container
    psql:start                                      Start the Postgresql docker container if it isn't running
    psql:stop                                       Stop the Postgresql docker container
    psql:rebuild                                    Copy the Postgresql docker container, and build a new container.
    psql:status                                     Shows status of Postgresql
    psql:list                                       List all databases
EOF
    ;;
esac
