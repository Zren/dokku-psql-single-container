#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE  ]] && set -x

[[ -f "$DOKKU_ROOT/ENV"  ]] && source "$DOKKU_ROOT/ENV"

APP="$2"
PSQL_ROOT="$DOKKU_ROOT/.psql-sc"
PSQL_IMAGE="${PSQL_SC_IMAGE:-postgres:9.3}"
PSQL_CONTAINER_NAME="psql-single-container"
PSQL_PORT=5432
PSQL_HOST=postgres

check_already_exists() {
  [[ -f "$PSQL_ROOT/db_$APP" ]] && echo "Database for $APP already exists" && exit 1
}

check_exists() {
  [[ ! -f "$PSQL_ROOT/db_$APP" ]] && echo "No database configured for $APP" && exit 1
}

check_app() {
  [[ -z "$APP" ]] && echo "Please specify an app to run the command on" && exit 1
}

check_container() {
  [[ -z "$PSQL_ID" ]] && echo "Postgresql container not started. Start with dokku psql:start" && exit 1
}

load_container_id() {
  PSQL_ID=$(docker ps -f status=running | grep "$PSQL_CONTAINER_NAME" | awk '{print $1}') || true
}

db_url() {
  local APP="$1"
  local DATABASE=$(cat "$PSQL_ROOT/db_$APP")
  local PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
  echo "postgresql://${DATABASE}:${PASSWORD}@${PSQL_HOST}:${PSQL_PORT}/${DATABASE}"
}

database_name() {
  echo "$1" | tr .- _
}

env_for() {
  local APP="$1"
  if [[ -f "$PSQL_ROOT/db_$APP" ]] && [[ -f "$PSQL_ROOT/pass_$APP" ]]; then
    local URL=$(db_url "$APP")
    local DATABASE=$(cat "$PSQL_ROOT/db_$APP")
    local PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
    echo "DATABASE_URL=$URL POSTGRESQL_URL=$URL DB_TYPE=postgresql DB_HOST=$PSQL_HOST DB_PORT=$PSQL_PORT DB_NAME=$DATABASE DB_USER=$DATABASE DB_PASS=$PASSWORD"
  fi
}

set_link_and_env_for() {
  local APP="$1"
  dokku docker-options:add "$APP" build,deploy,run "--link $PSQL_CONTAINER_NAME:$PSQL_HOST"
  dokku_log_info1 "Setting config vars for $APP"
  dokku config:set-norestart "$APP" $(env_for "$APP") &> /dev/null
}

unset_link_and_env_for() {
  local APP="$1"
  dokku docker-options:remove "$APP" build,deploy,run "--link $PSQL_CONTAINER_NAME:$PSQL_HOST"
  dokku_log_info1 "Unsetting config vars for $APP"
  dokku config:unset-norestart "$APP" DATABASE_URL POSTGRESQL_URL DB_TYPE DB_HOST DB_PORT DB_NAME DB_USER DB_PASS &> /dev/null
}

interactive_docker_exec() {
  local TTY_OPT=$([[ -t 0 ]] && echo "--tty")
  docker exec --interactive "$TTY_OPT" "$@"
}

bind_ip_options() {
  local BIND_IP="$PSQL_SC_BIND_IP"
  local BIND_PORT="${PSQL_SC_BIND_PORT:-$PSQL_PORT}"
  if [[ -n $BIND_IP ]]; then
    echo "-p $BIND_IP:$PSQL_PORT:$BIND_PORT"
  else
    echo ''
  fi
}

